package main

import (
	_ "effective_mobile_test_task/docs" // docs is generated by Swag CLI, you have to import it.
	"effective_mobile_test_task/internal/database"
	"effective_mobile_test_task/internal/handlers"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"log"
	"log/slog"
	"os"
)

// @title Person API
// @version 1.0
// @description This is a sample server for managing persons.
// @termsOfService http://swagger.io/terms/

// @contact.name Dmitrky
// @contact.email d.kruteevz@gmail.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
func main() {
	slog.SetLogLoggerLevel(slog.LevelDebug)

	slog.Debug("starting load .env")
	err := godotenv.Load()

	if err != nil {
		log.Fatal("Error loading .env file: ", err)
	}
	slog.Debug("loaded .env")

	slog.Debug("starting init db")
	db, err := database.InitDB(os.Getenv("DATABASE_URL"))

	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}
	slog.Debug("db init finished")

	r := gin.Default()

	slog.Debug("setting up router")
	personHandler := handlers.NewPersonHandler(db)
	r.GET("/persons", personHandler.GetPersons)
	r.POST("/persons", personHandler.CreatePerson)
	r.PUT("/persons/:id", personHandler.UpdatePerson)
	r.DELETE("/persons/:id", personHandler.DeletePerson)
	slog.Debug("router initialized")
	port := os.Getenv("PORT")
	// Swagger
	url := ginSwagger.URL("http://localhost:" + port + "/swagger/doc.json") // The url pointing to API definition
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	slog.Debug("starting server on port " + port)
	if err := r.Run(":" + os.Getenv("PORT")); err != nil {
		log.Fatalf("Failed to run server: %v", err)
	}
}
